agent = in-vm agent or remote poller agent (can be multi-tennant)
master = aep

agent connects with
  hosts and capabilities

master tells it which work to do

if agent wants to gracefully disconnect, it asks to leave and
master moves work to other agents

if there were no others or disconnect was abrupt alarm

agents that wish to update themselves can spawn the new version,
ask to disconnect, and then exit.  The master will move their work
to the new version before they exit.

local agent config contains tenants and roles and local permissions overrides
local agent has srv domains to query for aep data.
proxy config is local config
public key auth

AEPs push config changes to agents, report on agent disconnects, and proxy
data and commands to/from agents.

download code on demand cache in local lit database.

msgpack framing with routing information for messages (source and dest)

Use repl to control server in prototype
use getters in _G in repl for easy command syntax

eventually add color to repl
fix multiple paste bug in repl

---------------------------------------------


Prototype basic AEP

[X] Listens on wss:// port with virgo/2.0 subprotocol and custom ssl cert.
[ ] Assigns tasks to agents upon connection.
[ ] Pushes down changes to checks/tasks to connected agents in response to API events.
[ ] Routes agent reports / events to alerting system.
[ ] Creates events when agents disconnect or have connection issues.
[ ] Serves code for new tasks the agent isn't yet programmed to do.

Prototype generic agent

[X] Connects to AEP(s) over wss:// and verifies custom cert to authenticate server.
[ ] Tells AEP about it's capabilities and location (whatever is needed to assign it proper work)
[ ] Accepts generic tasks from AEP, performs tasks and reports back results.
[ ] Downloads new code when the AEP assigns a task the agent has never run before.
